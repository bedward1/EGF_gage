```{r}
response.var.range=(matrix(NA,nrow=ncol(ws), ncol=2))
for (i in 1:ncol(ws)){
response.var.range[i,] = print(range(ws[,i],na.rm=T))
}
par(mar=c(3,3,3,3))
boxplot(t(response.var.range))
```
#### Are there any outliers?
```{r}
response.boxplot =boxplot(t(response.var.range))
```
*answer: none*  ### manual input
```{r}
#not used
#ws.v2 = ws[- which(ws$Fold.Change==(max(ws$Fold.Change,na.rm=TRUE))),]
```
recheck for other outliers
```{r}
# not used
#response.boxplot.v2 = boxplot(ws.v2$Fold.Change)
```
*looks ok now*
#### Are there any missing values? Should they be removed?
```{r}
summary.ws = print(summary(ws))
```
*No NAN*
```{r}
# not used
#ws.v2$EGF[which(is.na(ws.v2$EGF))]=1
```
*confirm the NA are removed*
```{r}
# not used
#summary.ws.v2 = print(summary(ws.v2))
```
**
### Determine data coding
```{r}
data.coding.workbook=loadWorkbook('../diagnostics/levels.xls',create=TRUE)
createSheet(data.coding.workbook,name='coding_levels')
description=paste((date()),'diagnostics: LEVELS of column data')
writeWorksheet(data.coding.workbook,colnames(ws), sheet= 1)
writeWorksheet(t(colnames(ws)),object=data.coding.workbook, sheet=1, startRow=3, startCol=2)
for (i in  1:ncol(ws)){
#output all levels for factors
writeWorksheet(levels(as.factor(ws[,i])), object= data.coding.workbook,sheet=1,startCol=i+1,startRow=5,header=F)
##TODO clean up this output
saveWorkbook(data.coding.workbook)
```
look at 'levels.xls' in /diagnostics to determine if coding is appropriate
* all is ok*
#### Recode variables
*none*
```{r}
#ws.v2.factored=ws.v
#skip
# make vector to id all columns to factor except response variable
# idx=1:ncol(ws.v2)
#idx = idx[-21]  # idx of response var
#for (i in idx)
{
#   ws.v2.factored[,i] = as.factor(ws.v2[,i])
}
```
#### Make new sheet in same .xls sheet and export summary
```{r}
createSheet(data.coding.workbook,name='levels_summary')
writeWorksheet(summary(ws.v2.factored),object=data.coding.workbook,sheet='levels_summary')
saveWorkbook(data.coding.workbook)
# and print to console
print(summary(ws.v2.factored))
```
createSheet(data.coding.workbook,name='levels_summary')
writeWorksheet(summary(ws),object=data.coding.workbook,sheet='levels_summary')
saveWorkbook(data.coding.workbook)
# and print to console
print(summary(ws))
```
**
#### Output of this step of preprocessing
```{r}
ws.prepocessed = ws
save.image('~/Documents/R_onAir/Anova_LDRD/LDRD_anova_projtemp/reports/Preprocessed.Rdata')
createSheet(data.coding.workbook,name='levels_summary')
writeWorksheet(summary(ws),object=data.coding.workbook,sheet='levels_summary')
saveWorkbook(data.coding.workbook)
# and print to console
print(summary(ws))
createSheet(data.coding.workbook,name='levels_summary')
writeWorksheet(summary(ws),object=data.coding.workbook,sheet=2)
saveWorkbook(data.coding.workbook)
# and print to console
print(summary(ws))
```
ws=as.data.frame(readWorksheetFromFile('~/Documents/R_onAir/GageAnalysis/data/sampledata.xls',sheet=1,header=T))
row.names(ws)=ws$Col1
data.coding.workbook=loadWorkbook('~/Documents/R_onAir/GageAnalysis/diagnostics/levels.xls',create=TRUE)
require(Gage)
require(gage)
data(kegg.gs)
load('~/Documents/R_onAir/GageAnalysis/munge//Preproccessing.Rmd')
load('~/Documents/R_onAir/GageAnalysis/munge/Preproccessing.Rmd')
save.image('~/Documents/R_onAir/Anova_LDRD/LDRD_anova_projtemp/munge/Preprocessed.Rdata')
save.image('~/Documents/R_onAir/GageAnalysis//munge/Preprocessed.Rdata')
load('~/Documents/R_onAir/GageAnalysis/munge/Preprocessed.Rdata')
```{r}
data(kegg.gs)
```
### Import data
```{r}
load('~/Documents/R_onAir/GageAnalysis/munge/Preprocessed.Rdata')
data.G1 = ws
path.lib = kegg.gs
control.idx = grep('HN',ws,ignore.case=T)
View(response.var.range)
View(ws)
control.idx = grep('HN',colnames(ws),ignore.case=T)
fix(control.idx)
test.idx = grep('DCIS',colnames(ws),ignore.case=T)
fix(test.idx)
colnames(ws[control.idx])
check.treatment = colnames(ws[test.idx])
check.treatment = print(colnames(ws[test.idx]))
analysis <- gage(ws, gsets = path.lib, ref = control.idx, samp = test.idx)
analysis <- gage(data.G1, gsets = path.lib, ref = control.idx, samp = test.idx)
print(control.dix)
control.idx
print(test.idx)
analysis <- gage(data.G1, gsets = kegg.gs, ref = control.idx, samp = test.idx)
help(gage)
data.G1 = as.matrix(ws)
#identify control and test column for comparison
control.idx = grep('HN',colnames(ws),ignore.case=T)
test.idx = grep('DCIS',colnames(ws),ignore.case=T)
#check
check.control =print(colnames(ws[control.idx]))
check.treatment = print(colnames(ws[test.idx]))
```
** gernalized from here on **
analysis <- gage(data.G1, gsets = kegg.gs, ref = control.idx, samp = test.idx)
analysis <- gage(data.G1, gsets = kegg.gs, ref = control.idx, samp = test.idx)
View(data.G1)
View(gse16873)
View(gse16873)
data.G1 = as.data.frame(ws)
View(data.G1)
data.G1 = as.data.frame(ws,row.names=row.names)
data.G1 = as.data.frame(ws,row.names=row.names(ws))
View(data.G1)
analysis <- gage(data.G1, gsets = kegg.gs, ref = control.idx, samp = test.idx)
data.G1 = as.matrix(ws,row.names=row.names(ws))
analysis <- gage(data.G1, gsets = kegg.gs, ref = control.idx, samp = test.idx)
View(data.G1)
View(ws)
View(ws.prepocessed)
View(ws)
data.G1 = as.matrix(ws[,2:13])
View(data.G1)
analysis <- gage(data.G1, gsets = kegg.gs, ref = control.idx, samp = test.idx)
control.idx = grep('HN',colnames(ws),ignore.case=T)
test.idx = grep('DCIS',colnames(ws),ignore.case=T)
#check
check.control =print(colnames(ws[control.idx]))
check.treatment = print(colnames(ws[test.idx]))
```
** gernalized from here on **
analysis <- gage(data.G1, gsets = kegg.gs, ref = control.idx, samp = test.idx)
control.idx = grep('HN',colnames(data.G1),ignore.case=T)
test.idx = grep('DCIS',colnames(ws),ignore.case=T)
#check
check.control =print(colnames(data.G1[control.idx]))
check.treatment = print(colnames(data.G1[test.idx]))
```
** gernalized from here on **
analysis <- gage(data.G1, gsets = kegg.gs, ref = control.idx, samp = test.idx)
test.idx = grep('DCIS',colnames(data.G1),ignore.case=T)
analysis <- gage(data.G1, gsets = kegg.gs, ref = control.idx, samp = test.idx)
setwd('~/Documents/R_onAir/GageAnalysis/)
setwd('~/Documents/R_onAir/GageAnalysis/')
analysis.1 <- gage(data.G1, gsets = kegg.gs, ref = control.idx, samp = test.idx)
analysis.1 <- gage(data.G1, gsets = kegg.gs, ref = control.idx, samp = test.idx)``
analysis.1$stats
analysis.1$greater
head(analysis.1$greater)
write.csv(analysis.1$stats,'~/Desktop/teststats.csv')
write.csv(analysis.1$greater,'~/Desktop/testgreater.csv')
write.csv(analysis.1$less,'~/Desktop/testgreater.csv')
write.csv(analysis.1$less,'~/Desktop/testless.csv')
write.csv(analysis.1$greater,'~/Desktop/testgreater.csv')
```r http://www.biomedcentral.com/1471-2105/10/161 `
analysis.1 <- gage(data.G1, gsets = kegg.gs, ref = control.idx, samp = test.idx, same.dir=F)
ans.same.dir =F
ans.use.fold = T
ans.rank.test = T
analysis.1 <- gage(data.G1, gsets = kegg.gs, ref = control.idx, samp = test.idx, same.dir=ans.same.dir, use.fold= ans.use.fold, rank.test= ans.rank.test)
ans.same.dir = F
ans.use.fold = T
ans.rank.test = T
ref.ans = control.idx
samp.ans = test.idx
analysis.1 <- gage(data.G1, gsets = kegg.gs, ref = ref.ans, samp = samp.ans, same.dir=ans.same.dir, use.fold= ans.use.fold, rank.test= ans.rank.test)
```
saaTest.ans = gs.KSTest
analysis.1 <- gage(data.G1, gsets = kegg.gs, ref = ref.ans, samp = samp.ans, same.dir=ans.same.dir, use.fold= ans.use.fold, rank.test= ans.rank.test, saaTest = saaTest.ans)
```
compare.ans = 'unpaired'
analysis.1 <- gage(data.G1, gsets = kegg.gs, ref = ref.ans, samp = samp.ans, same.dir=ans.same.dir, use.fold= ans.use.fold, rank.test= ans.rank.test, saaTest = saaTest.ans, compare= compare.ans)
```
use.stouffer.ans= T
analysis.1 <- gage(data.G1, gsets = kegg.gs, ref = ref.ans, samp = samp.ans, same.dir=ans.same.dir, use.fold= ans.use.fold, rank.test= ans.rank.test, saaTest = saaTest.ans, compare= compare.ans, use.stouffer=use.stouffer.ans)
compare.ans = 'unpaired' # or 'paried'
use.stouffer.ans= T # p-value normalization method
analysis.1 <- gage(data.G1, gsets = kegg.gs, ref = ref.ans, samp = samp.ans, same.dir=ans.same.dir, use.fold= ans.use.fold, rank.test= ans.rank.test, saaTest = saaTest.ans, compare= compare.ans, use.stouffer=use.stouffer.ans)
data(egSymb)
View(egSymb)
write.table(ws$greater, file = '~/Document gage_table.txt",
write.table(ws$greater, file = '~/Document gage_table.txt", sep ="\t")
)
write.table(ws$greater, file = '~/Document gage_table.txt', sep ="\t")
write.table(ws$greater, file = '~/Documents/R_onAir/GageAnalysis/reports/test_sample_gage.txt', sep ="\t")
write.table(analysis.1$greater, file = '~/Documents/R_onAir/GageAnalysis/reports/test_sample_gage.txt', sep ="\t")
write.table(analysis.1$greater, file = '~/Documents/R_onAir/GageAnalysis/reports/test_sample_gage.csv', sep ="\t")
write.table(analysis.1$greater, file = '~/Documents/R_onAir/GageAnalysis/reports/test_sample_gage.xsl', sep ="\t")
write.table(analysis.1$greater, file = '~/Documents/R_onAir/GageAnalysis/reports/test_sample_gage.xls', sep ="\t")
write.table(analysis.1$greater, file = '~/Documents/R_onAir/GageAnalysis/reports/test_sample_gage.xls', sep ="\t")
sigGeneSet(analysis.1)
help(sigGeneSet)
a=sigGeneSet(analysis.1)
summary.regulated = sigGeneSet(analysis.1)
ans.same.dir = T
ans.use.fold = T
ans.rank.test = T
ref.ans = control.idx
samp.ans = test.idx
saaTest.ans = gs.KSTest # non-parametric
compare.ans = 'unpaired' # or 'paried'
use.stouffer.ans= T # p-value normalization method
analysis.1 <- gage(data.G1, gsets = kegg.gs, ref = ref.ans, samp = samp.ans, same.dir=ans.same.dir, use.fold= ans.use.fold, rank.test= ans.rank.test, saaTest = saaTest.ans, compare= compare.ans, use.stouffer=use.stouffer.ans)
```
### output
#### text output to /report location. change name as necessary
`r write.table(analysis.1$greater, file = '~/Documents/R_onAir/GageAnalysis/reports/test_sample_gage.xls', sep ="\t") `
summary.regulated = sigGeneSet(analysis.1)
summary.regulated = sigGeneSet(analysis.1, heatmap=T)
summary.regulated = sigGeneSet(analysis.1, heatmap=TRUE)
`r summary.regulated = print(sigGeneSet(analysis.1, ) )`
summary.regulated = print(sigGeneSet(analysis.1, ) )
+     test4up = T, output = T, outname = "gse16873.kegg.up", make.plot = F)
analysis.esg.up <- esset.grp(analysis.1$greater,
+     data.G1, gsets = kegg.gs, ref = ref.ans, samp = samp.ans,
+     test4up = T, output = T, outname = "gse16873.kegg.up", make.plot = F)
analysis.esg.up <- esset.grp(analysis.1$greater,
+     data.G1, gsets = kegg.gs, ref = ref.ans, samp = samp.ans,
+     test4up = T, output = T, outname = "test", make.plot = F)
analysis.esg.up <- esset.grp(analysis.1$greater,
+     data.G1, gsets = kegg.gs, ref = ref.ans, samp = samp.ans,
+     test4up = T, output = T, outname = "test", make.plot = F)
analysis.esg.up <- esset.grp(analysis.1$greater,     data.G1, gsets =kegg.gs, ref = ref.ans, samp = samp.ans,test4up = T, output = T, outname = "test", make.plot = F)
fix(analysis.esg.up)
analysis.esg.up$overlapCounts
analysis.esg.up$coreGeneSets
library(pathview)
library(Pathview)
summary.regulated = sigGeneSet(analysis.1, heatmap=1)
setwd('~/Documents/R_onAir/GageAnalysis/')
summary.regulated = sigGeneSet(analysis.1, heatmap=1)
setwd('~/Documents/R_onAir/GageAnalysis/reports/')
summary.regulated = sigGeneSet(analysis.1, heatmap=1)
summary.regulated = sigGeneSet(analysis.1, heatmap=1, pdf.size=c(10,10))
summary.regulated = sigGeneSet(analysis.1, heatmap=1, pdf.size=c(10,10), cuffoff=.0001)
summary.regulated = sigGeneSet(analysis.1, heatmap=1, pdf.size=c(10,10), cuoff=.0001)
summary.regulated = sigGeneSet(analysis.1, heatmap=1, pdf.size=c(10,10), cutoff=.0001)
summary.regulated = sigGeneSet(analysis.1, heatmap=1, pdf.size=c(4,4), cutoff=.0001)
summary.regulated = sigGeneSet(analysis.1, heatmap=1, pdf.size=c(8,8), cutoff=.0001)
summary.regulated = sigGeneSet(analysis.1, heatmap=1, pdf.size=c(8,8), qpval= q.val = cutoff=.01)
summary.regulated = sigGeneSet(analysis.1, heatmap=1, pdf.size=c(8,8), qpval= q.val,  cutoff=.01)
summary.regulated = sigGeneSet(analysis.1, heatmap=1, pdf.size=c(8,8), qpval= 'q.val',  cutoff=.01)
names(kegg.gs)
names(analysis.esg.up)
analysis.esg.up$coreGeneSets
fix(kegg.gs)
analysis.esg.up <- esset.grp(analysis.1$greater,data.G1, gsets =kegg.gs, ref = ref.ans, samp = samp.ans,test4up = T, same.dir=same.dir.ans output = T, outname = "test", make.plot = T, compare = compare.ans)
analysis.esg.up <- esset.grp(analysis.1$greater,data.G1, gsets =kegg.gs, ref = ref.ans, samp = samp.ans,test4up = T, same.dir=same.dir.ans output = T, outname = "test", make.plot = T, compare = compare.ans)
analysis.esg.up <- esset.grp(analysis.1$greater,data.G1, gsets =kegg.gs, ref = ref.ans, samp = samp.ans,test4up = T, same.dir=same.dir.ans output = T, outname = "test", make.plot = F, compare = compare.ans)
analysis.esg.up <- esset.grp(analysis.1$greater,data.G1, gsets =kegg.gs, ref = ref.ans, samp = samp.ans,test4up = T, same.dir=same.dir,ans output = T, outname = "test", make.plot = F, compare = compare.ans)
analysis.esg.up <- esset.grp(analysis.1$greater,data.G1, gsets =kegg.gs, ref = ref.ans, samp = samp.ans,test4up = T, same.dir=same.dir.ans, output = T, outname = "test", make.plot = F, compare = compare.ans)
ans.same.dir = T
ans.use.fold = T # or F is t-statistic
ans.rank.test = T
ans.ref = control.idx
ans.samp = test.idx
ans.saaTest = gs.KSTest # non-parametric
ans.sam = 'unpaired' # or 'paried'
ans.use.stouffer= T # p-value normalization method
analysis.esg.up <- esset.grp(analysis.1$greater,data.G1, gsets =kegg.gs, ref = ans.ref, samp = ans.samp,test4up = T, same.dir=ans.same.dir, output = T, outname = "test", make.plot = F, compare = ans.compare)
ans.compare = 'as.group' # 'paired', 'unpaired', '1ongroup','as.group'
analysis.1 <- gage(data.G1, gsets = kegg.gs, ref = ans.ref, samp = ans.samp, same.dir=ans.same.dir, use.fold= ans.use.fold, rank.test= ans.rank.test, saaTest = ans.saaTest, compare= ans.compare, use.stouffer=ans.use.stouffer)
summary.regulated = sigGeneSet(analysis.1, heatmap=1, pdf.size=c(8,8), qpval= 'q.val',  cutoff=.01) #TODO change formatting of heatmap
summary.regulated = sigGeneSet(analysis.1, heatmap=1, pdf.size=c(8,8), qpval= 'q.val',  cutoff=.01) #TODO change formatting of heatmap
fix(analysis.1)
ans.same.dir = F
analysis.1 <- gage(data.G1, gsets = kegg.gs, ref = ans.ref, samp = ans.samp, same.dir=ans.same.dir, use.fold= ans.use.fold, rank.test= ans.rank.test, saaTest = ans.saaTest, compare= ans.compare, use.stouffer=ans.use.stouffer)
summary.regulated = sigGeneSet(analysis.1, heatmap=1, pdf.size=c(8,8), qpval= 'q.val',  cutoff=.01) #TODO change formatting of heatmap
### identify gene sets (pathways) that overlap in their core genes
# need t use same input as as for 'gage' call
analysis.esg.up <- esset.grp(analysis.1$greater,data.G1, gsets =kegg.gs, ref = ans.ref, samp = ans.samp,test4up = T, same.dir=ans.same.dir, output = T, outname = "test", make.plot = F, compare = ans.compare)
names(kegg.gs)
names(analysis.esg.up)
summary.regulated = sigGeneSet(analysis.1$greater, heatmap=1, pdf.size=c(8,8), qpval= 'q.val',  cutoff=.01) #TODO change formatting of heatmap
summary.regulated = sigGeneSet(analysis.1, heatmap=1, pdf.size=c(8,8), qpval= 'q.val',  cutoff=.01) #TODO change formatting of heatmap
analysis.esg.up <- esset.grp(analysis.1$greater,data.G1, gsets =kegg.gs, ref = ans.ref, samp = ans.samp,test4up = T, same.dir=ans.same.dir, output = T, outname = "test", make.plot = T, compare = ans.compare)
names(analysis.esg.up,1)
head(names(analysis.esg.up),1)
names(analysis.esg.up)
analysis.esg.up$setGroups
analysis.esg.up$connectedComponent
analysis.esg.up$allSets
analysis.esg.up$overlapCounts
analysis.esg.up$overlapPvals
analysis.esg.up$essentialSets
analysis.esg.up$coreGeneSets
kegg.gs$
write.table(analysis.esg.up$coreGeneSets,'./testcore.xls')
write.csv(analysis.esg.up$coreGeneSets,'./testcore.xls')
writeWorksheet('outputtest.xls', analysis.esg.up$coreGeneSets)
writeWorksheet(object='outputtest.xls', sheet='1',analysis.esg.up$coreGeneSets)
writeWorksheet(object='outputtest.xls', sheet='1',unlist(analysis.esg.up$coreGeneSets))
unlist(analysis.esg.up$coreGeneSets)
kegg.gs$
analysis.esg.up$setGroups
names(analysis.esg.up)
analysis.1$greater
analysis.esg.up$setGroups
analysis.esg.up$allSets
analysis.esg.up$setGroups
analysis.esg.up$setGroups
analysis.esg.up$setGroups[1]
analysis.esg.up$setGroups[[1]]
analysis.esg.up$connectedComponent
analysis.esg.up$coreGeneSets
analysis.esg.up$coreGeneSets[1]
analysis.esg.up$coreGeneSets[[1]]
intersect(analysis.esg.up$coreGeneSets[[1]],analysis.esg.up$coreGeneSets[[2]])
intersect(analysis.esg.up$coreGeneSets[[1]],analysis.esg.up$coreGeneSets[[2]])
kegg.gs$hsa04141 Protein processing in endoplasmic reticulum
kegg.gs$hsa04141 Protein processing in endoplasmic reticulum[[]]
kegg.gs$hsa04141 Protein processing in endoplasmic reticulum[[1]]
kegg.gs$hsa04141 Protein processing in endoplasmic reticulum
kegg.gs[[2]]
kegg.gs[[1]]
data(gse16873)
cn=colnames(gse16873)
hn=grep('HN',cn, ignore.case =TRUE)
dcis=grep('DCIS',cn, ignore.case =TRUE)
#kegg test for 1-directional changes
data(kegg.gs)
gse16873.kegg.p <- gage(gse16873, gsets = kegg.gs,
ref = hn, samp = dcis)
rownames(gse16873.kegg.p$greater)[1:3]
gs=unique(unlist(kegg.gs[rownames(gse16873.kegg.p$greater)[1:3]]))
essData=essGene(gs, gse16873, ref =hn, samp =dcis)
head(essData)
ref1=1:6
samp1=7:12
#generated text file for data table, pdf files for heatmap and scatterplot
for (gs in rownames(gse16873.kegg.p$greater)[1:3]) {
outname = gsub(" |:|/", "_", substr(gs, 10, 100))
geneData(genes = kegg.gs[[gs]], exprs = essData, ref = ref1,
samp = samp1, outname = outname, txt = TRUE, heatmap = TRUE,
Colv = FALSE, Rowv = FALSE, dendrogram = "none", limit = 3, scatterplot = TRUE)
}
essGene
head(analysis.esg.up$coreGeneSets)
head(analysis.esg.up$coreGeneSets,2)
summary.regulated = sigGeneSet(analysis.1, heatmap=1, pdf.size=c(8,8), qpval= 'q.val',  cutoff=.01) #TODO change formatting of heatmap
ans.compare = 'paired' # 'paired', 'unpaired', '1ongroup','as.group'
analysis.1 <- gage(data.G1, gsets = kegg.gs, ref = ans.ref, samp = ans.samp, same.dir=ans.same.dir, use.fold= ans.use.fold, rank.test= ans.rank.test, saaTest = ans.saaTest, compare= ans.compare, use.stouffer=ans.use.stouffer)
```
### output
#### text output to /report location. change name as necessary
summary.regulated = sigGeneSet(analysis.1, heatmap=1, pdf.size=c(8,8), qpval= 'q.val',  cutoff=.01) #TODO change formatting of heatmap
print.top = 3
genes=unique(unlist(kegg.gs[rownames(gse16873.kegg.p$greater)[1:print.top]]))
genes.print.data=essGene(genes.print, data.G1, ref =ans.ref, samp = ans.sam)
genes.print=unique(unlist(kegg.gs[rownames(gse16873.kegg.p$greater)[1:print.top]]))
genes.print.data=essGene(genes.print, data.G1, ref =ans.ref, samp = ans.sam)
genes.print=unique(unlist(kegg.gs[rownames(gse16873.kegg.p$greater)[1:print.top]]))
genes.print=unique(unlist(path.lib[rownames(data.G1.kegg$greater)[1:print.top]]))
genes.print=unique(unlist(path.lib[rownames(analysis.1$greater)[1:print.top]]))
genes.print.data=essGene(genes.print, data.G1, ref =ans.ref, samp = ans.sam)
genes.print.data=essGene(genes.print, data.G1, ref =ans.ref, samp = ans.samp)
View(genes.print.data)
geneData(genes = path.lib[[gs]], exprs = genes.print.data, ref = ans.ref,
print.top = 3
genes.print=unique(unlist(path.lib[rownames(analysis.1$greater)[1:print.top]]))
genes.print.data=essGene(genes.print, data.G1, ref =ans.ref, samp = ans.samp)
print.top = 3
genes.print=unique(unlist(path.lib[rownames(analysis.1$greater)[1:print.top]]))
genes.print.data=essGene(genes.print, data.G1, ref =ans.ref, samp = ans.samp)
for (gs in rownames(data.G1$greater)[1:print.top]) {
outname = gsub(" |:|/", "_", substr(genes.print, 10, 100))
geneData(genes = path.lib[[gs]], exprs = genes.print.data, ref = ans.ref,
samp = ans.samp, outname = outname, txt = T, heatmap = T,
Colv = F, Rowv = F, dendrogram = "none", limit = 3, scatterplot = T)
}```
for (gs in rownames(data.G1$greater)[1:print.top]) {
outname = gsub(" |:|/", "_", substr(genes.print, 10, 100))
geneData(genes = path.lib[[gs]], exprs = genes.print.data, ref = ans.ref,
samp = ans.samp, outname = outname, txt = T, heatmap = T,
Colv = F, Rowv = F, dendrogram = "none", limit = 3, scatterplot = T)
}
for (gs in rownames(analysis.1$greater)[1:print.top]) {
outname = gsub(" |:|/", "_", substr(genes.print, 10, 100))
geneData(genes = path.lib[[gs]], exprs = genes.print.data, ref = ans.ref,
samp = ans.samp, outname = outname, txt = T, heatmap = T,
Colv = F, Rowv = F, dendrogram = "none", limit = 3, scatterplot = T)
}
fix(outname)
for (gs in rownames(analysis.1$greater)[1:print.top]) {
# outname = gsub(" |:|/", "_", substr(genes.print, 10, 100))
geneData(genes = path.lib[[gs]], exprs = genes.print.data, ref = ans.ref,
samp = ans.samp, outname = outname, txt = T, heatmap = T,
Colv = F, Rowv = F, dendrogram = "none", limit = 3, scatterplot = T)
}
geneData(genes = path.lib[[gs]], exprs = genes.print.data, ref = ans.ref,
samp = ans.samp, outname = outname, txt = T, heatmap = T,
Colv = F, Rowv = F, dendrogram = "none", limit = 3, scatterplot = T)
path.lib[[gs]]
path.lib[[gs]]
substr(genes.print, 10, 100)
for (gs in rownames(analysis.1$greater)[1:print.top]) {
outname = gsub(" |:|/", "_", substr(genes.print, 10, 100))
geneData(genes = path.lib[[gs]], exprs = genes.print.data, ref = ans.ref,
samp = ans.samp, txt = T, heatmap = T,
Colv = F, Rowv = F, dendrogram = "none", limit = 3, scatterplot = T)
}
outname = substr(genes.print, 10, 100))
outname = substr(genes.print, 10, 100)
rownames(analysis.1$greater)[1:print.top]
substr(rownames(analysis.1$greater), 10, 100)
substr(rownames(analysis.1$greater), 10, 100)[gs]
substr(rownames(analysis.1$greater)[gs], 10, 100)
outname = gs
geneData(genes = path.lib[[gs]], exprs = genes.print.data, ref = ans.ref,
samp = ans.samp, txt = T, heatmap = T,
Colv = F, Rowv = F, dendrogram = "none", limit = 3, scatterplot = F)
}
for (gs in rownames(analysis.1$greater)[1:print.top]) {
outname = gs
geneData(genes = path.lib[[gs]], exprs = genes.print.data, ref = ans.ref,
samp = ans.samp, txt = T, heatmap = T,
Colv = F, Rowv = F, dendrogram = "none", limit = 3, scatterplot = F)
}
for (gs in rownames(analysis.1$greater)[1:print.top]) {
outname = gs
geneData(genes = path.lib[[gs]], exprs = genes.print.data, ref = ans.ref,
samp = ans.samp, txt = T, heatmap = T,
Colv = F, Rowv = F, dendrogram = "none", outname=gs, limit = 3, scatterplot = F)
}
ncol(analysis.1)
ncol(data.G1)
1:ncol(data.G1/2)
1:ncol(data.G1)/2
geneData(genes = path.lib[[gs]], exprs = genes.print.data, ref = 1:(ncol(data.G1)/2),
1:(ncol(data.G1)/2)
ncol(data.G1)
ncol(data.G1)/2
ncol(data.G1)/2+1
(ncol(data.G1)/2+1) : ncol(data.G1)
for (gs in rownames(analysis.1$greater)[1:print.top]) {
outname = gs
# numbering of these colums is different from original. Refs are 1st half, samples are second half
geneData(genes = path.lib[[gs]], exprs = genes.print.data, ref = 1:(ncol(data.G1)/2),,
samp = (ncol(data.G1)/2+1) : ncol(data.G1), txt = T, heatmap = T,
Colv = F, Rowv = F, dendrogram = "none", outname=gs, limit = 3, scatterplot = F)
}
install.packages("BioC")
source("http://bioconductor.org/biocLite.R")
biocLite("pathview")
library(pathview)
> gse16873.d <- gse16873[ ,samp] - gse16873[ ,ref]
gse16873.d <- gse16873[ ,samp] - gse16873[ ,ref]
gse16873.d <- gse16873[ ,samp.ans] - gse16873[ ,ref.ans]
View(gse16873.d)
path.ids=c("hsa04110 Cell cycle", "hsa00020 Citrate cycle (TCA cycle)")
require(pathview)
path.ids=c("hsa04110 Cell cycle", "hsa00020 Citrate cycle (TCA cycle)")
> path.ids2 <- substr(path.ids, 1, 8)
path.ids2 <- substr(path.ids, 1, 8)
pv.out.list <- sapply(path.ids2, function(pid) pathview(gene.data = gse16873.d[,
+
#Graphviz view
1:2], pathway.id = pid, species = "hsa"))
pv.out.list <- sapply(path.ids2, function(pid) pathview(gene.data = gse16873.d[,1:2], pathway.id = pid, species = "hsa"))
require(pathview)
library(pathview)
gse16873.d <- gse16873[ ,samp.ans] - gse16873[ ,ref.ans]
path.ids=c("hsa04110 Cell cycle", "hsa00020 Citrate cycle (TCA cycle)")
path.ids2 <- substr(path.ids, 1, 8)
#native KEGG view
pv.out.list <- sapply(path.ids2, function(pid) pathview(gene.data = gse16873.d[,1:2], pathway.id = pid, species = "hsa"))
library(pathview)
ver
version
source("http://bioconductor.org/biocLite.R")
biocLite("pathview"
)
library(pathview)
install.packages("~/Downloads/hgu133plus2.db_2.4.1.tar.gz", repos = NULL, type = "source")
version
